{"ast":null,"code":"export function simulateLife({\n  ageStart = 25,\n  ageEnd = 65,\n  monthlyIncome = 2000,\n  savingsRate = 0.1,\n  riskRate = 0.0,\n  yieldRate = 0.05,\n  goalAmount = 100000\n}) {\n  let savings = 0;\n  let gamblingWealth = 0;\n  const timeline = [];\n  let goalAchievedAge = null;\n  for (let age = ageStart; age <= ageEnd; age++) {\n    const annualIncome = monthlyIncome * 12;\n    const savedAmount = annualIncome * savingsRate;\n    const riskedAmount = annualIncome * riskRate;\n\n    // Savings growth with compound interest\n    savings = (savings + savedAmount) * (1 + yieldRate);\n\n    // Gambling simulation (10% win rate, 70% average loss on losses)\n    const gamblingOutcome = Math.random();\n    let gamblingReturn;\n    if (gamblingOutcome < 0.1) {\n      // 10% chance of winning (300% return)\n      gamblingReturn = riskedAmount * 3;\n    } else {\n      // 90% chance of losing (70% loss)\n      gamblingReturn = -riskedAmount * 0.7;\n    }\n    gamblingWealth = Math.max(0, gamblingWealth + riskedAmount + gamblingReturn);\n\n    // Check if savings goal is achieved\n    if (!goalAchievedAge && savings >= goalAmount) {\n      goalAchievedAge = age;\n    }\n    timeline.push({\n      age,\n      savings: Math.round(savings),\n      gambling: Math.round(gamblingWealth),\n      goalAchieved: savings >= goalAmount\n    });\n  }\n  return {\n    timeline,\n    finalSavings: Math.round(savings),\n    finalGambling: Math.round(gamblingWealth),\n    goalAchievedAge,\n    yearsToGoal: goalAchievedAge ? goalAchievedAge - ageStart : null\n  };\n}\nexport function calculateGoalProgress(currentAge, savings, goalAmount) {\n  const progress = Math.min(savings / goalAmount * 100, 100);\n  return {\n    percentage: Math.round(progress),\n    remaining: Math.max(0, goalAmount - savings),\n    achieved: savings >= goalAmount\n  };\n}\nexport function calculateFreedomMetrics(finalWealth, monthlyExpenses = 2000) {\n  const monthlyPassiveIncome = finalWealth * 0.04 / 12; // 4% withdrawal rule\n  const freedomScore = Math.min(monthlyPassiveIncome / monthlyExpenses * 100, 100);\n  const canRetire = monthlyPassiveIncome >= monthlyExpenses;\n  return {\n    monthlyPassiveIncome: Math.round(monthlyPassiveIncome),\n    freedomScore: Math.round(freedomScore),\n    canRetire,\n    yearsOfExpenses: Math.round(finalWealth / (monthlyExpenses * 12))\n  };\n}\nexport function calculateStressLevel(riskRate, finalWealth) {\n  const riskStress = riskRate * 60; // Risk contributes to stress\n  const wealthComfort = Math.min(finalWealth / 100000, 1) * 40; // Wealth reduces stress\n  return Math.max(0, Math.min(100, riskStress - wealthComfort + 20)); // Base stress level\n}","map":{"version":3,"names":["simulateLife","ageStart","ageEnd","monthlyIncome","savingsRate","riskRate","yieldRate","goalAmount","savings","gamblingWealth","timeline","goalAchievedAge","age","annualIncome","savedAmount","riskedAmount","gamblingOutcome","Math","random","gamblingReturn","max","push","round","gambling","goalAchieved","finalSavings","finalGambling","yearsToGoal","calculateGoalProgress","currentAge","progress","min","percentage","remaining","achieved","calculateFreedomMetrics","finalWealth","monthlyExpenses","monthlyPassiveIncome","freedomScore","canRetire","yearsOfExpenses","calculateStressLevel","riskStress","wealthComfort"],"sources":["/Users/andriy/Documents/projects/liferun/src/utils/simulation.js"],"sourcesContent":["export function simulateLife({\n  ageStart = 25,\n  ageEnd = 65,\n  monthlyIncome = 2000,\n  savingsRate = 0.1,\n  riskRate = 0.0,\n  yieldRate = 0.05,\n  goalAmount = 100000\n}) {\n  let savings = 0;\n  let gamblingWealth = 0;\n  const timeline = [];\n  let goalAchievedAge = null;\n\n  for (let age = ageStart; age <= ageEnd; age++) {\n    const annualIncome = monthlyIncome * 12;\n    const savedAmount = annualIncome * savingsRate;\n    const riskedAmount = annualIncome * riskRate;\n\n    // Savings growth with compound interest\n    savings = (savings + savedAmount) * (1 + yieldRate);\n\n    // Gambling simulation (10% win rate, 70% average loss on losses)\n    const gamblingOutcome = Math.random();\n    let gamblingReturn;\n    if (gamblingOutcome < 0.1) {\n      // 10% chance of winning (300% return)\n      gamblingReturn = riskedAmount * 3;\n    } else {\n      // 90% chance of losing (70% loss)\n      gamblingReturn = -riskedAmount * 0.7;\n    }\n    gamblingWealth = Math.max(0, gamblingWealth + riskedAmount + gamblingReturn);\n\n    // Check if savings goal is achieved\n    if (!goalAchievedAge && savings >= goalAmount) {\n      goalAchievedAge = age;\n    }\n\n    timeline.push({\n      age,\n      savings: Math.round(savings),\n      gambling: Math.round(gamblingWealth),\n      goalAchieved: savings >= goalAmount\n    });\n  }\n\n  return {\n    timeline,\n    finalSavings: Math.round(savings),\n    finalGambling: Math.round(gamblingWealth),\n    goalAchievedAge,\n    yearsToGoal: goalAchievedAge ? goalAchievedAge - ageStart : null\n  };\n}\n\nexport function calculateGoalProgress(currentAge, savings, goalAmount) {\n  const progress = Math.min((savings / goalAmount) * 100, 100);\n  return {\n    percentage: Math.round(progress),\n    remaining: Math.max(0, goalAmount - savings),\n    achieved: savings >= goalAmount\n  };\n}\n\nexport function calculateFreedomMetrics(finalWealth, monthlyExpenses = 2000) {\n  const monthlyPassiveIncome = (finalWealth * 0.04) / 12; // 4% withdrawal rule\n  const freedomScore = Math.min((monthlyPassiveIncome / monthlyExpenses) * 100, 100);\n  const canRetire = monthlyPassiveIncome >= monthlyExpenses;\n\n  return {\n    monthlyPassiveIncome: Math.round(monthlyPassiveIncome),\n    freedomScore: Math.round(freedomScore),\n    canRetire,\n    yearsOfExpenses: Math.round(finalWealth / (monthlyExpenses * 12))\n  };\n}\n\nexport function calculateStressLevel(riskRate, finalWealth) {\n  const riskStress = riskRate * 60; // Risk contributes to stress\n  const wealthComfort = Math.min(finalWealth / 100000, 1) * 40; // Wealth reduces stress\n  return Math.max(0, Math.min(100, riskStress - wealthComfort + 20)); // Base stress level\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}